---
name: function_declaration
use_alternating: true
alternating_anchors:
  - ": ("
  - ") ="
grammar_modes: 7
evidence_types:
  - "identifier"
  - "parameters"
  - "body"
transformation_templates:
  4: "$1: ($2) = $3"
  2: "void $1($2) $3"
  1: "void $1($2) $3"
priority: 150
---
name: main_function_void
use_alternating: true
alternating_anchors:
  - 'main : ('
  - ') = '
grammar_modes: 7
evidence_types:
  - "parameters"       # Inside parentheses
  - "body"             # After " = "
transformation_templates:
  4: "main : ($1) = $2"  # CPP2 output
  2: "int main($1) $2"  # CPP output - main must return int
  1: "int main($1) $2"  # C output
priority: 200
---
name: main_function_void_no_space
use_alternating: true
alternating_anchors:
  - 'main: ('
  - ') = '
grammar_modes: 7
evidence_types:
  - "parameters"       # Inside parentheses
  - "body"             # After " = "
transformation_templates:
  4: "main: ($1) = $2"  # CPP2 output
  2: "int main($1) $2"  # CPP output - main must return int
  1: "int main($1) $2"  # C output
priority: 200
---
name: function_void_declaration
use_alternating: true
alternating_anchors:
  - ': ('
  - ') = '
grammar_modes: 7
evidence_types:
  - "identifier"       # Function name (before ": (")
  - "parameters"       # Inside parentheses (between ": (" and ") = ")
  - "body"             # After " = "
transformation_templates:
  4: "$1: ($2) = $3"   # CPP2 output
  2: "void $1($2) $3"  # CPP output (void return type)
  1: "void $1($2) $3"  # C output
priority: 150
---
name: main_function_with_return
use_alternating: true
alternating_anchors:
  - 'main: ('
  - ') -> '
  - ' = '
grammar_modes: 7
evidence_types:
  - "parameters"
  - "return_type"
  - "body"
transformation_templates:
  4: "main: ($1) -> $2 = $3"  # CPP2 output
  2: "$2 main($1) $3"  # CPP output: return_type main(params) body
  1: "$2 main($1) $3"  # C output
priority: 200
---
name: cpp2_nested_function_with_return
use_alternating: true
alternating_anchors:
  - ": ("
  - ") -> "
  - " = "
grammar_modes: 0
evidence_types:
  - "identifier"
  - "parameters"
  - "return_type"
  - "body"
transformation_templates:
  2: "auto $1 = []($2) -> $3 $4;"
  1: "/* no C equiv */ $1: ($2) -> $3 = $4"
priority: 120
---
name: cpp2_nested_function_void
use_alternating: true
alternating_anchors:
  - ": ("
  - ") = "
grammar_modes: 0
evidence_types:
  - "identifier"
  - "parameters"
  - "body"
transformation_templates:
  2: "auto $1 = []($2) $3;"
  1: "/* no C equiv */ $1: ($2) = $3"
priority: 120
---
name: cpp2_parameter
use_alternating: true
alternating_anchors:
  - ': '
grammar_modes: 7
evidence_types:
  - "identifier"       # Parameter name (before : )
  - "type"             # Type (after : )
transformation_templates:
  4: "$1 : $2"         # CPP2 output: name : type
  2: "$2 $1"           # CPP output: type name
  1: "$2 $1"           # C output: type name
---
name: cpp2_typed_variable
use_alternating: true
alternating_anchors:
  - ":"
  - "="
grammar_modes: 4
evidence_types:
  - "identifier"       # Variable name (before :)
  - "type_expression"  # Type (between : and =)
  - "expression"       # Initializer value (after =)
transformation_templates:
  2: "$2 $1 = $3;"     # CPP output: type name = value;
  1: "$2 $1 = $3;"     # C output: type name = value;
priority: 10
---
name: cpp2_variable
use_alternating: true
alternating_anchors:
  - ":="
grammar_modes: 4
evidence_types:
  - "identifier"       # Variable name (before :=)
  - "expression"       # Initializer value
transformation_templates:
  2: "auto $1 = $2"    # CPP output
  1: "/* no C equiv */ $1 := $2" # C output (not supported)
---
name: cpp2_type_alias
use_alternating: true
alternating_anchors:
  - ": type"
  - "="
  - ";"
grammar_modes: 4
evidence_types:
  - "identifier"       # Alias name (before ": type")
  - "trailing"         # Space between "type" and "="
  - "type_expression"  # Aliased type (between "=" and ";")
  - "trailing"         # Trailing segment after semicolon
transformation_templates:
  2: "using $1 = $3;"  # CPP output
  1: "typedef $3 $1;"  # C output
priority: 80
---
name: cpp2_template_type_alias
use_alternating: true
alternating_anchors:
  - "type"
  - "="
  - ";"
grammar_modes: 4
evidence_types:
  - "identifier_template"  # Type name with optional template args
  - "trailing"             # Optional tokens between "type" and "="
  - "type_expression"      # The aliased type
  - "trailing"             # Trailing after semicolon
transformation_templates:
  2: "using $1 = $3;"      # CPP output
  1: "typedef $3 $1;"      # C output
priority: 80
---
name: cpp2_namespace
signature_patterns:
  - ": namespace ="
grammar_modes: 4
capture_patterns:
  - "^([a-zA-Z_][a-zA-Z0-9_]*)"  # $1 = namespace name
transformation_templates:
  2: "namespace $1"               # CPP output
  1: "/* no C equiv */"           # C output (not supported)
---
name: cpp2_union_type
use_alternating: true
alternating_anchors:
  - ": @union type ="
  - "{"
  - "}"
grammar_modes: 4
evidence_types:
  - "identifier"       # Union name
  - "body"             # Union body with alternatives
transformation_templates:
  2: "struct $1 { std::variant<$2> value; };"  # Simplified, but not accurate
  1: "/* no C equiv */ $1: @union type = $2"
